# -*- coding: utf-8 -*-
"""Heart Disease prediction using ML

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qPLMn113aPFVSqQwVtIuR5q89r1253lV
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

heart_data = pd.read_csv('/content/heart_disease_data.csv')

heart_data.head()

heart_data.tail()

# number of rows and columns in the dataset
heart_data.shape

# getting some info about the data
heart_data.info()

# checking for missing values
heart_data.isnull().sum()

# statistical measures about the data
heart_data.describe()

# checking the distribution of Target Variable
heart_data['target'].value_counts()

X = heart_data.drop(columns='target', axis=1)
Y = heart_data['target']

print(X)

print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training
Logistic Regression
"""

model = LogisticRegression()

# training the LogisticRegression model with Training data
model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on Training data : ', training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on Test data : ', test_data_accuracy)

"""Building a Predictive System"""

input_data = (62,0,0,140,268,0,0,160,0,3.6,0,2,2)

# change the input data to a numpy array
input_data_as_numpy_array= np.asarray(input_data)

# reshape the numpy array as we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]== 0):
  print('The Person does not have a Heart Disease')
else:
  print('The Person has Heart Disease')

import matplotlib.pyplot as plt

# Mock data: Predicted outcomes
predictions = ['Heart Disease', 'No Heart Disease', 'Heart Disease', 'No Heart Disease', 'Heart Disease']
heart_disease_count = predictions.count('Heart Disease')
no_heart_disease_count = predictions.count('No Heart Disease')

# Data to plot
labels = 'Heart Disease', 'No Heart Disease'
sizes = [heart_disease_count, no_heart_disease_count]
colors = ['#ff9999','#66b3ff']
explode = (0.1, 0)  # explode the 1st slice (i.e., 'Heart Disease')

# Plot
plt.figure(figsize=(8, 8))
plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)
plt.title('Heart Disease Prediction Distribution')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.

plt.show()

from sklearn.metrics import classification_report
import numpy as np

# Example true labels and predictions
# Replace these with your actual data
y_true = np.array([1, 0, 1, 1, 0, 1, 0, 1, 0, 1])  # True labels (1 = Heart Disease, 0 = No Heart Disease)
y_pred = np.array([1, 0, 1, 0, 0, 1, 0, 1, 1, 0])  # Model predictions

# Generate the classification report
report = classification_report(y_true, y_pred, target_names=['No Heart Disease', 'Heart Disease'])

# Print the report
print(report)
